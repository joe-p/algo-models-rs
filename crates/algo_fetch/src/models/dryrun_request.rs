/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// DryrunRequest : Request data type for dryrun endpoint. Given the Transactions and simulated ledger state upload, run TEAL scripts and return debugging information.
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct DryrunRequest {
    #[serde(rename = "accounts")]
    pub accounts: Vec<models::Account>,
    #[serde(rename = "apps")]
    pub apps: Vec<models::Application>,
    /// LatestTimestamp is available to some TEAL scripts. Defaults to the latest confirmed timestamp this algod is attached to.
    #[serde(rename = "latest-timestamp")]
    pub latest_timestamp: i64,
    /// ProtocolVersion specifies a specific version string to operate under, otherwise whatever the current protocol of the network this algod is running in.
    #[serde(rename = "protocol-version")]
    pub protocol_version: String,
    /// Round is available to some TEAL scripts. Defaults to the current round on the network this algod is attached to.
    #[serde(rename = "round")]
    pub round: i32,
    #[serde(rename = "sources")]
    pub sources: Vec<models::DryrunSource>,
    #[serde(rename = "txns")]
    pub txns: Vec<String>,
}

impl DryrunRequest {
    /// Request data type for dryrun endpoint. Given the Transactions and simulated ledger state upload, run TEAL scripts and return debugging information.
    pub fn new(accounts: Vec<models::Account>, apps: Vec<models::Application>, latest_timestamp: i64, protocol_version: String, round: i32, sources: Vec<models::DryrunSource>, txns: Vec<String>) -> DryrunRequest {
        DryrunRequest {
            accounts,
            apps,
            latest_timestamp,
            protocol_version,
            round,
            sources,
            txns,
        }
    }
}

