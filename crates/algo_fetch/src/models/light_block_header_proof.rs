/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

use serde_with::serde_as;

/// LightBlockHeaderProof : Proof of membership and position of a light block header.
#[serde_as]
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct LightBlockHeaderProof {
    /// The index of the light block header in the vector commitment tree
    #[serde(rename = "index")]
    pub index: i32,
    /// The encoded proof.
    #[serde_as(as = "serde_with::base64::Base64")]
    #[serde(rename = "proof")]
    pub proof: Vec<u8>,
    /// Represents the depth of the tree that is being proven, i.e. the number of edges from a leaf to the root.
    #[serde(rename = "treedepth")]
    pub treedepth: i32,
}

impl LightBlockHeaderProof {
    /// Proof of membership and position of a light block header.
    pub fn new(index: i32, proof: Vec<u8>, treedepth: i32) -> LightBlockHeaderProof {
        LightBlockHeaderProof {
            index,
            proof,
            treedepth,
        }
    }
}

