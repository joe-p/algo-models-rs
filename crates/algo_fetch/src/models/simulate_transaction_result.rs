/*
 * Algod REST API.
 *
 * API endpoint for algod operations.
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: contact@algorand.com
 * Generated by: https://openapi-generator.tech
 */

use crate::models;
use serde::{Deserialize, Serialize};

/// SimulateTransactionResult : Simulation result for an individual transaction
#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct SimulateTransactionResult {
    /// Budget used during execution of an app call transaction. This value includes budged used by inner app calls spawned by this transaction.
    #[serde(rename = "app-budget-consumed", skip_serializing_if = "Option::is_none")]
    pub app_budget_consumed: Option<i32>,
    #[serde(rename = "exec-trace", skip_serializing_if = "Option::is_none")]
    pub exec_trace: Option<Box<models::SimulationTransactionExecTrace>>,
    /// The account that needed to sign this transaction when no signature was provided and the provided signer was incorrect.
    #[serde(rename = "fixed-signer", skip_serializing_if = "Option::is_none")]
    pub fixed_signer: Option<String>,
    /// Budget used during execution of a logic sig transaction.
    #[serde(rename = "logic-sig-budget-consumed", skip_serializing_if = "Option::is_none")]
    pub logic_sig_budget_consumed: Option<i32>,
    #[serde(rename = "txn-result")]
    pub txn_result: Box<models::PendingTransactionResponse>,
    #[serde(rename = "unnamed-resources-accessed", skip_serializing_if = "Option::is_none")]
    pub unnamed_resources_accessed: Option<Box<models::SimulateUnnamedResourcesAccessed>>,
}

impl SimulateTransactionResult {
    /// Simulation result for an individual transaction
    pub fn new(txn_result: models::PendingTransactionResponse) -> SimulateTransactionResult {
        SimulateTransactionResult {
            app_budget_consumed: None,
            exec_trace: None,
            fixed_signer: None,
            logic_sig_budget_consumed: None,
            txn_result: Box::new(txn_result),
            unnamed_resources_accessed: None,
        }
    }
}

